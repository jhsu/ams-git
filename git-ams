#!/usr/bin/env ruby
require 'optparse'

HELP=<<-HELP

    git ams --[environment] [branch_name] # set the name of the development branch
    git ams                  # checks out development branch and pulls any updates

HELP

ENVS = [:development, :production]

def help()
	puts HELP
end

def checkout(branch, opts="")
	if branch && branch != ""
		`git checkout#{" " + opts} #{branch}`
	else
		puts "Branch not set"
	end
end

def pull
	`git pull`
end

def switch_to(env)
	branch = branch_name env
	if branch != ""
		checkout branch
	else
		puts <<-INSTRUCT
You need set your branch name for #{env} using:
    git ams --[environment] [branch]
INSTRUCT
	end
end

def branch_name(env)
  `git config --get workflow.#{env}`
end

def list()
	listing = []
	ENVS.each do |env|
		listing << "#{env} : #{branch_name(env)}"
	end
	puts "\nEnvironments\n============"
	puts listing
	puts ""
end

options = OptionParser.new do |opts|
  # Help
	opts.on("-h", "Get Help") do |opt|
		help
	end

  # Switching environment
	ENVS.each do |env|
		opts.on("--#{env} branch", "set branch for #{env} work") do |branch|
			`git config workflow.#{env} #{branch}`
			puts "set #{env} branch to #{branch}"
		end
	end

  # List environments
	opts.on("-ls", "--list", "show working branches") do |listing|
		list
	end
end 

def parse_args(args)
	if args
		case args.first
		when /dev/
			switch_to(:development)
		when /pro/
			switch_to(:production)
		when /feature/
			if args.length > 1
				switch_to(:development)
				pull
				checkout(args[1], "-b")
			end
		else
			list
		end
	end
end

begin
	options.parse!(ARGV)
	parse_args(ARGV)
rescue
  puts HELP
end
